1. cf image
2. Label la plus présente ->
    match p = (n:Author) RETURN count(p) -> 80299
    match p = (n:Article) RETURN count(p) -> 51956 
    match p = (n:Venue) RETURN count(p) -> 4

Le label le plus présent est Author

3.
nombre moyen de d'articles publiés par auteur : match (n)-[q:AUTHOR]->(r) with r.name as g,count(n) as t return avg(t)
resultat -> 1.750644466307189

4. 
l'auteur qui a publié le plus :
match (n)-[q:AUTHOR]->(r) 
with r.name as nam,count(n) as ct 
with apoc.agg.maxItems(nam,ct) as maxData 
RETURN maxData.items, maxData.value

réponse : Peter G. Neumann avec 89 ouvrages

5. 
année pendant laquelle le plus de publications ont été proposées :
match (n:Article) 
with n.year as date,count(n) as ct 
with apoc.agg.maxItems(date,ct) as maxdata 
return maxdata.items, maxdata.value

réponse : année 2006 avec 7536 publications

6. 
idée : chercher les co-auteurs de B.F. puis chercher les co-auteurs de ces co-auteurs qui ne sont pas B.F.
(ne marche toujours pas...)
match (t)<-[s:AUTHOR]-(n)-[q:AUTHOR]->(r) 
where r.name = "Brian Fitzgerald" 
with collect(t.name) as l 
match (a)<-[b:AUTHOR]-(c)-[d:AUTHOR]->(e) 
where e in l and a.name <> "Brian Fitzgerald" 
return collect(a.name)

7. repose sur 6

8. 
CALL gds.graph.create('graph2','Article',{ CITED: { orientation: 'UNDIRECTED'}})
CALL gds.pageRank.write('graph2', {writeProperty: 'pageRank'})

9. 
MATCH (n:Article) RETURN n.title,n.pageRank ORDER BY n.pageRank DESC LIMIT 10

10. 
CALL db.index.fulltext.queryNodes("articles", "open source") YIELD node 
WITH [(author)<-[:AUTHOR]-(node) | author.name] as tab 
UNWIND tab as t 
WITH collect(t) as list 
WITH apoc.coll.frequencies(list) AS res 
RETURN apoc.coll.sortMaps(res,"count")

réponse : Denys Poshyvanyk avec 16 publications

11.
create index on :Authors(name)

12.

couples d'auteurs et leur article en commun
MATCH (d)<-[e:AUTHOR]-(a)-[b:AUTHOR]->(c) RETURN d.name,c.name,a.title

--> créer une relation entre deux auteurs qui ont publié au moins un article en commun
MATCH (d)<-[e:AUTHOR]-(a)-[b:AUTHOR]->(c) CREATE UNIQUE (d)-[t:CO_AUTHOR]->(c) RETURN type(t)

--> ajouter les propriétés year et collaborations aux relations CO_AUTHOR
match (a)-[t:CO_AUTHOR]->(b) 
SET t.year = apoc.coll.min([(a)<-[r:AUTHOR]-(s)-[v:AUTHOR]->(b) | s.year]) 
SET t.collaborations = size([(a)<-[r:AUTHOR]-(s)-[v:AUTHOR]->(b) | s.year]) 
RETURN a.name,b.name,t.year,t.collaborations

13.
match (a)-[t:CO_AUTHOR]->(b) WHERE t.year<2006 CREATE (a)-[s:CO_AUTHOR_EARLY]->(b) RETURN a.name,b.name,type(s)
match (a)-[t:CO_AUTHOR]->(b) WHERE t.year>=2006 CREATE (a)-[s:CO_AUTHOR_LATE]->(b) RETURN a.name,b.name,type(s)

14. 
CALL gds.alpha.triangleCount.write('whole-graph', {relationshipTypes:['CO_AUTHOR_EARLY'],
  writeProperty: 'triangles', clusteringCoefficientProperty:'clustering'
}) YIELD nodeCount, triangleCount, averageClusteringCoefficient

CALL gds.alpha.triangleCount.write('whole-graph', {relationshipTypes:['CO_AUTHOR_LATE'],
  writeProperty: 'triangles', clusteringCoefficientProperty:'clustering'
}) YIELD nodeCount, triangleCount, averageClusteringCoefficient

Les résultats obtenus sont le nombre de triangles dans le graphe avec les deux types de relation : on en déduit le le calcul du coefficient de clustering global pour chacune des deux relations en fonction du nombre de triangles obtenu précédemment :
Le coefficient de clustering calculé ici est global et représente la probabilité que deux auteurs distincts ayant un co-auteur en commun soient eux-mêmes coauteurs
Le coefficient de clustering vaut respectivement 0.2181425208217988 et 0.19651381976902763, donc dans les deux cas LATE et EARLY, "les collaborateurs de mes collaborateurs ne sont pas sucetibles d'être mes collaborateurs"

15.
CALL gds.alpha.scc.write('whole-graph', {relationshipTypes: ['CITED'], writeProperty: 'componentId'})
YIELD setCount, maxSetSize, minSetSize

16. 
match (n:Article) return n.componentId,count(n.componentId),collect(n.title) ORDER BY count(n.componentId) DESC

17.
les 3 composantes avec le plus de noeuds
match (n:Article) return n.componentId,count(n.componentId) ORDER BY count(n.componentId) DESC LIMIT 3

visualisation :
match (n:Article) WHERE n.componentId in [47355,7097,14935] return n

18.
MATCH (n:Article)-[:AUTHOR]->(a:Author) return n.componentId,sum(size([(a)<-[:AUTHOR]-(s) | s.title]))*1.0/count(n.componentId) as densite

19. 
MATCH (n:Article)-[:AUTHOR]->(a:Author) return n.componentId,sum(size([(a)<-[:AUTHOR]-(s) | s.title]))*1.0/count(n.componentId) as densite ORDER BY densite DESC LIMIT 3

20. 
ajouter la propriété weight = 1
match (a)-[t:CO_AUTHOR]->(b) SET t.weight=1 return type(t)

appel de l'algorithme Louvain
CALL gds.louvain.stream('whole-graph', { relationshipTypes: ['CO_AUTHOR'] }) 
YIELD nodeId, communityId, intermediateCommunityIds
RETURN collect(gds.util.asNode(nodeId).name) AS name, communityId
ORDER BY size(name) DESC

